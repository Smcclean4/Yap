// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Friendships {
    id            String       @id @default(cuid())
    friendId      String
    friendsWithId String
    friends       User         @relation("UserFriends", fields: [friendId], references: [id])
    friendsWith   User         @relation("WhoImFriendsWith", fields: [friendsWithId], references: [id])
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    status        FriendStatus @default(PENDING)

    @@unique([friendId, friendsWithId])
    @@index([friendId])
    @@index([friendsWithId])
}

enum FriendStatus {
    PENDING
    ACCEPTED
    BLOCKED
}

model User {
    id            String        @id @default(cuid())
    name          String?       @unique
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    heading       String?
    friends       Friendships[] @relation("UserFriends")
    friendsWith   Friendships[] @relation("WhoImFriendsWith")
    online        OnlineStatus?
    messages      Threads[]
    accounts      Account[]
    sessions      Session[]
}

enum OnlineStatus {
    ONLINE
    OFFLINE
    AWAY
    BUSY
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model HomeUpdates {
    id          String   @id @default(cuid())
    heading     String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Like {
    id    String @id @default(cuid())
    yapId String
    user  String
    yap   Yap    @relation(fields: [yapId], references: [id], onDelete: Cascade)

    @@unique([yapId])
}

model Yap {
    id        String   @id @default(cuid())
    message   String
    likes     Like[]
    user      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Threads {
    id        String   @id @default(cuid())
    threadId  String
    chat      Chat[]
    messenger String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [threadId], references: [id], onDelete: Cascade)

    @@unique([threadId, messenger])
}

model Chat {
    id        String   @id @default(cuid())
    message   String
    user      String
    senderId  String
    threads   Threads  @relation(fields: [senderId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([senderId])
}
