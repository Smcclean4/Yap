generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Friend {
  id       String   @id @default(cuid())
  friendId String   @unique
  heading  String?
  image    String?
  online   Boolean?
  name     String?
  friend   User     @relation(fields: [friendId], references: [id], onDelete: Cascade)
}

model Request {
  id        String   @id @default(cuid())
  requestId String   @unique
  name      String?
  image     String?
  heading   String?
  online    Boolean?
  friend    User     @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  heading       String?
  online        Boolean?
  bio           String?
  friends       Friend[]
  requests      Request[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HomeUpdates {
  id          String   @id @default(cuid())
  heading     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id    String @id @default(cuid())
  yapId String @unique
  user  String
  yap   Yap    @relation(fields: [yapId], references: [id], onDelete: Cascade)
}

model Yap {
  id        String   @id @default(cuid())
  message   String
  user      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]
}
